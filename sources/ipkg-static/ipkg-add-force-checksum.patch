diff --git a/libopkg/opkg_conf.c b/libopkg/opkg_conf.c
index 4eee37b..b6e49fc 100644
--- a/libopkg/opkg_conf.c
+++ b/libopkg/opkg_conf.c
@@ -55,6 +55,7 @@ opkg_option_t options[] = {
 	  { "force_reinstall", OPKG_OPT_TYPE_BOOL, &_conf.force_reinstall },
 	  { "force_space", OPKG_OPT_TYPE_BOOL, &_conf.force_space },
 	  { "force_postinstall", OPKG_OPT_TYPE_BOOL, &_conf.force_postinstall },
+	  { "force_checksum", OPKG_OPT_TYPE_BOOL, &_conf.force_checksum },
           { "check_signature", OPKG_OPT_TYPE_BOOL, &_conf.check_signature },
 	  { "ftp_proxy", OPKG_OPT_TYPE_STRING, &_conf.ftp_proxy },
 	  { "http_proxy", OPKG_OPT_TYPE_STRING, &_conf.http_proxy },
diff --git a/libopkg/opkg_conf.h b/libopkg/opkg_conf.h
index e0e045a..ae3e870 100644
--- a/libopkg/opkg_conf.h
+++ b/libopkg/opkg_conf.h
@@ -79,6 +79,7 @@ struct opkg_conf
      int force_removal_of_essential_packages;
      int force_postinstall;
      int force_remove;
+     int force_checksum;
      int prefer_arch_to_version;
      int check_signature;
      int nodeps; /* do not follow dependencies */
diff --git a/libopkg/opkg_install.c b/libopkg/opkg_install.c
index 162e574..22d05ca 100644
--- a/libopkg/opkg_install.c
+++ b/libopkg/opkg_install.c
@@ -68,7 +68,7 @@ satisfy_dependencies_for(pkg_t *pkg)
 	  if (! conf->force_depends) {
 	       opkg_msg(INFO,
 			    "This could mean that your package list is out of date or that the packages\n"
-			    "mentioned above do not yet exist (try 'opkg update'). To proceed in spite\n"
+			    "mentioned above do not yet exist (try 'ipkg update'). To proceed in spite\n"
 			    "of this problem try again with the '-force-depends' option.\n");
 	       pkg_vec_free(depends);
 	       return -1;
@@ -1378,7 +1378,7 @@ opkg_install_pkg(pkg_t *pkg, int from_upgrade)
          }
 	  if (err) {
 	       opkg_msg(ERROR, "Failed to download %s. "
-			       "Perhaps you need to run 'opkg update'?\n",
+			       "Perhaps you need to run 'ipkg update'?\n",
 			    pkg->name);
 	       return -1;
 	  }
@@ -1407,7 +1407,7 @@ opkg_install_pkg(pkg_t *pkg, int from_upgrade)
          }
        }else{
          opkg_msg(ERROR, "Signature file is missing for %s. "
-                         "Perhaps you need to run 'opkg update'?\n",
+                         "Perhaps you need to run 'ipkg update'?\n",
 			 pkg->name);
          return -1;
        }
@@ -1424,12 +1424,19 @@ opkg_install_pkg(pkg_t *pkg, int from_upgrade)
          file_md5 = file_md5sum_alloc(pkg->local_filename);
          if (file_md5 && strcmp(file_md5, pkg->md5sum))
          {
-              opkg_msg(ERROR, "Package %s md5sum mismatch. "
-			"Either the opkg or the package index are corrupt. "
-			"Try 'opkg update'.\n",
-			pkg->name);
-              free(file_md5);
-              return -1;
+              if (!conf->force_checksum)
+              {
+                  opkg_msg(ERROR, "Package %s md5sum mismatch. "
+			    "Either the ipkg or the package index are corrupt. "
+			    "Try 'ipkg update'.\n",
+			    pkg->name);
+                  free(file_md5);
+                  return -1;
+              }
+              else
+              {
+                  opkg_msg(NOTICE, "Ignored %s md5sum mismatch.\n", pkg->name);
+              }
          }
 	 if (file_md5)
               free(file_md5);
@@ -1442,12 +1449,22 @@ opkg_install_pkg(pkg_t *pkg, int from_upgrade)
          file_sha256 = file_sha256sum_alloc(pkg->local_filename);
          if (file_sha256 && strcmp(file_sha256, pkg->sha256sum))
          {
-              opkg_msg(ERROR, "Package %s sha256sum mismatch. "
-			"Either the opkg or the package index are corrupt. "
-			"Try 'opkg update'.\n",
-			pkg->name);
-              free(file_sha256);
-              return -1;
+              if (!conf->force_checksum)
+              {
+                  opkg_msg(ERROR,
+                           "Package %s sha256sum mismatch. "
+                           "Either the ipkg or the package index are corrupt. "
+                           "Try 'ipkg update'.\n",
+                           pkg->name);
+                  free(file_sha256);
+                  return -1;
+              }
+              else
+              {
+                  opkg_msg(NOTICE,
+                           "Ignored %s sha256sum mismatch.\n",
+                           pkg->name);
+              }
          }
 	 if (file_sha256)
               free(file_sha256);
@@ -1632,9 +1649,9 @@ pkg_is_hosed:
 	  pkg->state_status = SS_HALF_INSTALLED;
 
 	  /* Print some advice for the user. */
-	  opkg_msg(NOTICE, "To remove package debris, try `opkg remove %s`.\n",
+	  opkg_msg(NOTICE, "To remove package debris, try `ipkg remove %s`.\n",
 			  pkg->name);
-	  opkg_msg(NOTICE, "To re-attempt the install, try `opkg install %s`.\n",
+	  opkg_msg(NOTICE, "To re-attempt the install, try `ipkg install %s`.\n",
 			  pkg->name);
 
 	  sigprocmask(SIG_UNBLOCK, &newset, &oldset);
diff --git a/src/opkg-cl.c b/src/opkg-cl.c
index a1d121f..bcd1e58 100644
--- a/src/opkg-cl.c
+++ b/src/opkg-cl.c
@@ -42,6 +42,7 @@ enum {
 	ARGS_OPT_FORCE_SPACE,
 	ARGS_OPT_FORCE_POSTINSTALL,
 	ARGS_OPT_FORCE_REMOVE,
+	ARGS_OPT_FORCE_CHECKSUM,
 	ARGS_OPT_PREFER_ARCH_TO_VERSION,
 	ARGS_OPT_ADD_ARCH,
 	ARGS_OPT_ADD_DEST,
@@ -86,6 +87,8 @@ static struct option long_options[] = {
 	{"force_postinstall", 0, 0, ARGS_OPT_FORCE_POSTINSTALL},
 	{"force-remove", 0, 0, ARGS_OPT_FORCE_REMOVE},
 	{"force_remove", 0, 0, ARGS_OPT_FORCE_REMOVE},
+	{"force-checksum", 0, 0, ARGS_OPT_FORCE_CHECKSUM},
+	{"force_checksum", 0, 0, ARGS_OPT_FORCE_CHECKSUM},
 	{"prefer-arch-to-version", 0, 0, ARGS_OPT_PREFER_ARCH_TO_VERSION},
 	{"prefer-arch-to-version", 0, 0, ARGS_OPT_PREFER_ARCH_TO_VERSION},
 	{"noaction", 0, 0, ARGS_OPT_NOACTION},
@@ -178,6 +181,9 @@ args_parse(int argc, char *argv[])
 		case ARGS_OPT_FORCE_REMOVE:
 			conf->force_remove = 1;
 			break;
+		case ARGS_OPT_FORCE_CHECKSUM:
+			conf->force_checksum = 1;
+			break;
 		case ARGS_OPT_PREFER_ARCH_TO_VERSION:
 			conf->prefer_arch_to_version = 1;
 			break;
@@ -297,6 +303,7 @@ usage()
 	printf("\t--force-space                   Disable free space checks\n");
 	printf("\t--force-postinstall             Run postinstall scripts even in offline mode\n");
 	printf("\t--force-remove                  Remove package even if prerm script fails\n");
+	printf("\t--force-checksum                Don't fail on checksum mismatches\n");
 	printf("\t--noaction                      No action -- test only\n");
 	printf("\t--download-only                 No action -- download only\n");
 	printf("\t--nodeps                        Do not follow dependencies\n");
