diff -ruN a/Makefile.am b/Makefile.am
--- a/Makefile.am	2015-08-25 12:09:11.000000000 +0300
+++ b/Makefile.am	2015-08-25 13:11:28.000000000 +0300
@@ -47,7 +47,7 @@
 	@LIBEXIF_LIBS@ \
 	@LIBINTL@ \
 	@LIBICONV@ \
-	-lFLAC  $(flacoggflag) $(vorbisflag)
+	-lFLAC  $(flacoggflag) $(vorbisflag) @LIBFFMPEGTHUMBNAILER_LIBS@
 
 minidlnad_LDFLAGS = @STATIC_LDFLAGS@
 
diff -ruN a/albumart.c b/albumart.c
--- a/albumart.c	2015-08-25 12:09:11.000000000 +0300
+++ b/albumart.c	2015-08-25 13:11:28.000000000 +0300
@@ -32,6 +32,10 @@
 
 #include <jpeglib.h>
 
+#ifdef THUMBNAIL_CREATION
+#include <libffmpegthumbnailer/videothumbnailerc.h>
+#endif
+
 #include "upnpglobalvars.h"
 #include "albumart.h"
 #include "sql.h"
@@ -345,14 +349,68 @@
 	return NULL;
 }
 
+#ifdef THUMBNAIL_CREATION
+char *
+generate_thumbnail(const char * path)
+{
+	char *tfile = NULL;
+	video_thumbnailer *vt = NULL;
+	char cache_dir[MAXPATHLEN];
+
+	if( art_cache_exists(path, &tfile) )
+		return tfile;
+
+	if ( is_video(path) )
+	{
+
+		vt = video_thumbnailer_create();
+		if ( !vt )
+		{
+			free(tfile);
+			return 0;
+		}
+		vt->thumbnail_image_type = Jpeg;
+		vt->thumbnail_image_quality = runtime_vars.thumb_quality;
+		vt->thumbnail_size = runtime_vars.thumb_width;
+		vt->seek_percentage = 20;
+		vt->overlay_film_strip = (GETFLAG(THUMB_FILMSTRIP))?1:0;
+
+		DPRINTF(E_DEBUG, L_METADATA, "generating thumbnail: %s\n", path);
+
+		strncpyt(cache_dir, tfile, sizeof(cache_dir));
+		if ( !make_dir(dirname(cache_dir), S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH|S_IXOTH) &&
+			!video_thumbnailer_generate_thumbnail_to_file(vt, path, tfile) )
+		{
+			video_thumbnailer_destroy(vt);
+			return tfile;
+		}
+
+		video_thumbnailer_destroy(vt);
+	}
+	free(tfile);
+
+	return 0;
+}
+#endif
+
 int64_t
 find_album_art(const char *path, uint8_t *image_data, int image_size)
 {
 	char *album_art = NULL;
 	int64_t ret = 0;
 
-	if( (image_size && (album_art = check_embedded_art(path, image_data, image_size))) ||
-	    (album_art = check_for_album_file(path)) )
+	if(image_size)
+		album_art = check_embedded_art(path, image_data, image_size);
+
+	if(!album_art)
+		album_art = check_for_album_file(path);
+
+#ifdef THUMBNAIL_CREATION
+	if(!album_art && GETFLAG(THUMB_MASK))
+		album_art = generate_thumbnail(path);
+#endif
+
+	if(album_art)
 	{
 		ret = sql_get_int_field(db, "SELECT ID from ALBUM_ART where PATH = '%q'", album_art);
 		if( !ret )
diff -ruN a/configure.ac b/configure.ac
--- a/configure.ac	2015-08-25 12:09:11.000000000 +0300
+++ b/configure.ac	2015-08-25 13:11:28.000000000 +0300
@@ -607,6 +607,21 @@
         ]
 )
 
+AC_ARG_ENABLE(thumbnail,
+	[  --enable-thumbnail       enable video thumbnail generation using libffmpegthumbnailer],[
+	if test "$enableval" = "yes"; then
+		AC_DEFINE([THUMBNAIL_CREATION],[1],[Define to 1 if you want to enable video thumbnail generation])
+		PKG_CHECK_MODULES([LIBFFMPEGTHUMBNAILER], libffmpegthumbnailer, ,
+			AC_MSG_ERROR([Unable to find libffmpegthumbnailer]))
+		AC_SUBST([LIBFFMPEGTHUMBNAILER_CFLAGS])
+		AC_SUBST([LIBFFMPEGTHUMBNAILER_LIBS])
+        else
+                AC_MSG_RESULT([no])
+        fi
+        ],[
+                AC_MSG_RESULT([no])
+        ]
+)
 
 case "$target_os" in
 	darwin*)
diff -ruN a/inotify.c b/inotify.c
--- a/inotify.c	2015-08-25 12:09:11.000000000 +0300
+++ b/inotify.c	2015-08-25 13:10:19.000000000 +0300
@@ -601,6 +601,16 @@
 		sql_exec(db, "DELETE from OBJECTS where DETAIL_ID = %lld", detailID);
 	}
 	snprintf(art_cache, sizeof(art_cache), "%s/art_cache%s", db_path, path);
+
+#ifdef THUMBNAIL_CREATION
+	/* Remove video thumbnails */
+	if ( is_video(path) )
+	{
+		char *vthumb = art_cache;
+		strcpy(strchr(vthumb, '\0')-4, ".jpg");
+	}
+#endif
+	
 	remove(art_cache);
 
 	return 0;
@@ -650,6 +660,11 @@
 	int length, i = 0;
 	char * esc_name = NULL;
 	struct stat st;
+	
+#ifdef THUMBNAIL_CREATION
+	char renpath_buf[PATH_MAX];
+	int cookie = 0;
+#endif
         
 	pollfds[0].fd = inotify_init();
 	pollfds[0].events = POLLIN;
@@ -711,6 +726,16 @@
 				{
 					DPRINTF(E_DEBUG, L_INOTIFY,  "The directory %s was %s.\n",
 						path_buf, (event->mask & IN_MOVED_TO ? "moved here" : "created"));
+#ifdef THUMBNAIL_CREATION
+					/* We do not want to regenerate the thumbnails if e rename a directory.
+					   We should keep at least four cookies/olddir since IN_MOVED_FROM/IN_MOVED_TO may
+					   not arrive in sequence, but one should cover most cases */
+					if (event->cookie == cookie && event->mask & IN_MOVED_TO)
+					{
+						DPRINTF(E_DEBUG, L_INOTIFY, "Directory rename: %s -> %s \n", renpath_buf, path_buf);
+						rename_artcache_dir(renpath_buf, path_buf);
+					}
+#endif						
 					inotify_insert_directory(pollfds[0].fd, esc_name, path_buf);
 				}
 				else if ( (event->mask & (IN_CLOSE_WRITE|IN_MOVED_TO|IN_CREATE)) &&
@@ -743,7 +768,18 @@
 						(event->mask & IN_ISDIR ? "directory" : "file"),
 						path_buf, (event->mask & IN_MOVED_FROM ? "moved away" : "deleted"));
 					if ( event->mask & IN_ISDIR )
+#ifdef THUMBNAIL_CREATION
+					{
+						if ( event->mask & IN_MOVED_FROM )
+						{
+							strncpy(renpath_buf, path_buf, sizeof(renpath_buf));
+							cookie = event->cookie;
+						}
+#endif						
 						inotify_remove_directory(pollfds[0].fd, path_buf);
+#ifdef THUMBNAIL_CREATION
+					}
+#endif						
 					else
 						inotify_remove_file(path_buf);
 				}
diff -ruN a/minidlna.c b/minidlna.c
--- a/minidlna.c	2015-08-25 12:09:11.000000000 +0300
+++ b/minidlna.c	2015-08-25 12:57:11.000000000 +0300
@@ -532,6 +532,11 @@
 	runtime_vars.root_container = NULL;
 	runtime_vars.ifaces[0] = NULL;
 
+#ifdef THUMBNAIL_CREATION
+	runtime_vars.thumb_width = 160;
+	runtime_vars.thumb_quality = 8;
+#endif
+
 	/* read options file first since
 	 * command line arguments have final say */
 	if (readoptionsfile(optionsfile) < 0)
@@ -737,6 +742,30 @@
 			if (strtobool(ary_options[i].value))
 				SETFLAG(MERGE_MEDIA_DIRS_MASK);
 			break;
+#ifdef THUMBNAIL_CREATION
+		case ENABLE_THUMB:
+			if( (strcmp(ary_options[i].value, "yes") == 0) || atoi(ary_options[i].value) )
+				SETFLAG(THUMB_MASK);
+		break;
+		case THUMB_WIDTH:
+			runtime_vars.thumb_width = atoi(ary_options[i].value);
+			if (runtime_vars.thumb_width < 120)
+				runtime_vars.thumb_width = 120;
+			if (runtime_vars.thumb_width > 480)
+				runtime_vars.thumb_width = 480;
+			break;
+		case THUMB_QUALITY:
+			runtime_vars.thumb_quality = atoi(ary_options[i].value);
+			if (runtime_vars.thumb_quality < 5)
+				runtime_vars.thumb_quality = 5;
+			if (runtime_vars.thumb_quality > 30)
+				runtime_vars.thumb_quality = 30;
+		break;
+		case ENABLE_THUMB_FILMSTRIP:
+			if( (strcmp(ary_options[i].value, "yes") == 0) || atoi(ary_options[i].value) )
+				SETFLAG(THUMB_FILMSTRIP);
+		break;
+#endif			
 		default:
 			DPRINTF(E_ERROR, L_GENERAL, "Unknown option in file %s\n",
 				optionsfile);
diff -ruN a/minidlna.conf b/minidlna.conf
--- a/minidlna.conf	2015-08-25 12:09:11.000000000 +0300
+++ b/minidlna.conf	2015-08-25 13:11:28.000000000 +0300
@@ -15,20 +15,20 @@
 #   + "V" for video  (eg. media_dir=V,/home/jmaggard/Videos)
 #   + "P" for images (eg. media_dir=P,/home/jmaggard/Pictures)
 #   + "PV" for pictures and video (eg. media_dir=PV,/home/jmaggard/digital_camera)
-media_dir=/opt
+media_dir=/tmp/mnt
 
 # set this to merge all media_dir base contents into the root container
 # note: the default is no
-#merge_media_dirs=no
+merge_media_dirs=yes
 
 # set this if you want to customize the name that shows up on your clients
-#friendly_name=My DLNA Server
+friendly_name=Minidlna
 
 # set this if you would like to specify the directory where you want MiniDLNA to store its database and album art cache
-#db_dir=/var/cache/minidlna
+db_dir=%OPTWARE_TARGET_PREFIX%/minidlna
 
 # set this if you would like to specify the directory where you want MiniDLNA to store its log file
-#log_dir=/var/log
+log_dir=%OPTWARE_TARGET_PREFIX%/minidlna
 
 # set this to change the verbosity of the information that is logged
 # each section can use a different level: off, fatal, error, warn, info, or debug
@@ -80,4 +80,16 @@
 
 # maximum number of simultaneous connections
 # note: many clients open several simultaneous connections while streaming
-#max_connections=50
+max_connections=50
+
+# Suport to Movie Thumbnail generation. To use this option, thumbnail generation must be enable at compile time.
+enable_thumbnail=yes
+
+# The width of the thumbnail image. Large images takes more time to generate.  To use this option, thumbnail generation must be enable at compile time.
+thumbnail_width=160
+
+# Thumbnail Image quality. To use this option, thumbnail generation must be enable at compile time.
+thumbnail_quality=8
+
+# Should the thumbnail have a film strip? To use this option, thumbnail generation must be enable at compile time.
+enable_thumbnail_filmstrip=yes
diff -ruN a/minidlnatypes.h b/minidlnatypes.h
--- a/minidlnatypes.h	2015-08-25 12:09:11.000000000 +0300
+++ b/minidlnatypes.h	2015-08-25 13:11:28.000000000 +0300
@@ -51,6 +51,10 @@
 	int max_connections;	/* max number of simultaneous conenctions */
 	const char *root_container;	/* root ObjectID (instead of "0") */
 	const char *ifaces[MAX_LAN_ADDR];	/* list of configured network interfaces */
+#ifdef THUMBNAIL_CREATION
+	int thumb_width;
+	int thumb_quality;
+#endif
 };
 
 struct string_s {
diff -ruN a/options.c b/options.c
--- a/options.c	2015-08-25 12:09:11.000000000 +0300
+++ b/options.c	2015-08-25 13:11:28.000000000 +0300
@@ -64,7 +64,15 @@
 	{ USER_ACCOUNT, "user" },
 	{ FORCE_SORT_CRITERIA, "force_sort_criteria" },
 	{ MAX_CONNECTIONS, "max_connections" },
+#ifndef THUMBNAIL_CREATION
 	{ MERGE_MEDIA_DIRS, "merge_media_dirs" }
+#else
+	{ MERGE_MEDIA_DIRS, "merge_media_dirs" },
+	{ ENABLE_THUMB, "enable_thumbnail" },
+	{ THUMB_WIDTH, "thumbnail_width" },
+	{ THUMB_QUALITY, "thumbnail_quality" },
+	{ ENABLE_THUMB_FILMSTRIP, "enable_thumbnail_filmstrip" }
+#endif
 };
 
 int
diff -ruN a/options.h b/options.h
--- a/options.h	2015-08-25 12:09:11.000000000 +0300
+++ b/options.h	2015-08-25 13:11:28.000000000 +0300
@@ -57,7 +57,15 @@
 	USER_ACCOUNT,			/* user account to run as */
 	FORCE_SORT_CRITERIA,		/* force sorting by a given sort criteria */
 	MAX_CONNECTIONS,		/* maximum number of simultaneous connections */
+#ifndef THUMBNAIL_CREATION
 	MERGE_MEDIA_DIRS		/* don't add an extra directory level when there are multiple media dirs */
+#else
+	MERGE_MEDIA_DIRS,		/* don't add an extra directory level when there are multiple media dirs */
+	ENABLE_THUMB,                   /* enable thumbnail generation */
+	THUMB_WIDTH,                    /* thunbnail image with */
+	THUMB_QUALITY,                  /* thumnail image quality */
+	ENABLE_THUMB_FILMSTRIP          /* film strip overlay */
+#endif
 };
 
 /* readoptionsfile()
diff -ruN a/upnpglobalvars.h b/upnpglobalvars.h
--- a/upnpglobalvars.h	2015-08-25 12:09:11.000000000 +0300
+++ b/upnpglobalvars.h	2015-08-25 13:11:28.000000000 +0300
@@ -191,6 +191,10 @@
 #define NO_PLAYLIST_MASK      0x0008
 #define SYSTEMD_MASK          0x0010
 #define MERGE_MEDIA_DIRS_MASK 0x0020
+#ifdef THUMBNAIL_CREATION
+#define THUMB_MASK            0x0040
+#define THUMB_FILMSTRIP       0x0080
+#endif
 
 #define SETFLAG(mask)	runtime_flags |= mask
 #define GETFLAG(mask)	(runtime_flags & mask)
diff -ruN a/utils.c b/utils.c
--- a/utils.c	2015-08-25 12:09:11.000000000 +0300
+++ b/utils.c	2015-08-25 12:59:57.000000000 +0300
@@ -502,4 +502,16 @@
 	}
 	return type;
 }
+#ifdef THUMBNAIL_CREATION
+int
+rename_artcache_dir(const char * oldpath, const char * newpath)
+{
+	char old_artcache[PATH_MAX];
+	char new_artcache[PATH_MAX];
 
+	snprintf(old_artcache, sizeof(old_artcache), "%s/art_cache%s", db_path, oldpath);
+	snprintf(new_artcache, sizeof(old_artcache), "%s/art_cache%s", db_path, newpath);
+
+	return rename(old_artcache, new_artcache);
+}
+#endif
diff -ruN a/utils.h b/utils.h
--- a/utils.h	2015-08-25 12:09:11.000000000 +0300
+++ b/utils.h	2015-08-25 13:11:28.000000000 +0300
@@ -95,5 +95,8 @@
 /* Others */
 int make_dir(char * path, mode_t mode);
 unsigned int DJBHash(uint8_t *data, int len);
+#ifdef THUMBNAIL_CREATION
+int rename_artcache_dir(const char * oldpath, const char * newpath);
+#endif
 
 #endif
