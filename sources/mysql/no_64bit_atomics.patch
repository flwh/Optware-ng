--- a/include/atomic/gcc_builtins.h
+++ b/include/atomic/gcc_builtins.h
@@ -26,6 +26,7 @@
   return ret;
 }
 
+#ifndef HAVE_NO_64BIT_ATOMICS
 static inline int my_atomic_cas64(int64 volatile *a, int64 *cmp, int64 set)
 {
   int64 cmp_val= *cmp;
@@ -35,6 +36,17 @@
     *cmp = sav;
   return ret;
 }
+#else
+static inline int my_atomic_cas64(int64 volatile *a, int64 *cmp, int64 set)
+{
+  int ret= (*a == *cmp);
+  if (ret)
+    *a= set;
+  else
+    *cmp=*a;
+  return ret;
+}
+#endif
 
 static inline int my_atomic_casptr(void * volatile *a, void **cmp, void *set)
 {
@@ -51,20 +63,40 @@
   return __sync_fetch_and_add(a, v);
 }
 
+#ifndef HAVE_NO_64BIT_ATOMICS
 static inline int64 my_atomic_add64(int64 volatile *a, int64 v)
 {
   return __sync_fetch_and_add(a, v);
 }
+#else
+static inline int64 my_atomic_add64(int64 volatile *a, int64 v)
+{
+  int64 sav= *a;
+  *a+= v;
+  v= sav;
+  return v;
+}
+#endif
 
 static inline int32 my_atomic_fas32(int32 volatile *a, int32 v)
 {
   return __sync_lock_test_and_set(a, v);
 }
 
+#ifndef HAVE_NO_64BIT_ATOMICS
 static inline int64 my_atomic_fas64(int64 volatile *a, int64 v)
 {
   return __sync_lock_test_and_set(a, v);
 }
+#else
+static inline int64 my_atomic_fas64(int64 volatile *a, int64 v)
+{
+  int64 sav= *a;
+  *a= v;
+  v= sav;
+  return v;
+}
+#endif
 
 static inline void * my_atomic_fasptr(void * volatile *a, void * v)
 {
@@ -76,10 +108,17 @@
   return __sync_fetch_and_or(a, 0);
 }
 
+#ifndef HAVE_NO_64BIT_ATOMICS
 static inline int64 my_atomic_load64(int64 volatile *a)
 {
   return __sync_fetch_and_or(a, 0);
 }
+#else
+static inline int64 my_atomic_load64(int64 volatile *a)
+{
+  return *a;
+}
+#endif
 
 static inline void* my_atomic_loadptr(void * volatile *a)
 {
@@ -91,10 +130,17 @@
   (void) __sync_lock_test_and_set(a, v);
 }
 
+#ifndef HAVE_NO_64BIT_ATOMICS
 static inline void my_atomic_store64(int64 volatile *a, int64 v)
 {
   (void) __sync_lock_test_and_set(a, v);
 }
+#else
+static inline void my_atomic_store64(int64 volatile *a, int64 v)
+{
+  *a= v;
+}
+#endif
 
 static inline void my_atomic_storeptr(void * volatile *a, void *v)
 {
--- a/storage/innobase/include/os0atomic.h
+++ b/storage/innobase/include/os0atomic.h
@@ -247,8 +247,13 @@
 # define os_atomic_increment_uint32(ptr, amount ) \
 	os_atomic_increment(ptr, amount)
 
+#ifndef HAVE_NO_64BIT_ATOMICS
 # define os_atomic_increment_uint64(ptr, amount) \
 	os_atomic_increment(ptr, amount)
+#else
+static inline int64 os_atomic_increment_uint64(uint64 volatile *ptr, uint64 amount)
+{ *ptr += amount; return *ptr; }
+#endif
 
 /* Returns the resulting value, ptr is pointer to target, amount is the
 amount to decrement. */
@@ -265,8 +270,13 @@
 # define os_atomic_decrement_uint32(ptr, amount) \
 	os_atomic_decrement(ptr, amount)
 
+#ifndef HAVE_NO_64BIT_ATOMICS
 # define os_atomic_decrement_uint64(ptr, amount) \
 	os_atomic_decrement(ptr, amount)
+#else
+static inline int64 os_atomic_decrement_uint64(uint64 volatile *ptr, uint64 amount)
+{ *ptr -= amount; return *ptr; }
+#endif
 
 #endif
 
