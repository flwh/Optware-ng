--- Python-2.7.9/setup.py.orig	2014-12-10 18:00:01.000000000 +0200
+++ Python-2.7.9/setup.py	2015-01-26 22:00:50.991531031 +0200
@@ -17,7 +17,7 @@
 from distutils.command.install_lib import install_lib
 from distutils.spawn import find_executable
 
-cross_compiling = "_PYTHON_HOST_PLATFORM" in os.environ
+cross_compiling = ("_PYTHON_HOST_PLATFORM" in os.environ) and (os.environ["_PYTHON_HOST_PLATFORM"] != '')
 
 def get_platform():
     # cross build
@@ -35,6 +35,32 @@
 # This global variable is used to hold the list of modules to be disabled.
 disabled_module_list = []
 
+# Use correct mechanism to determine 32/64 bits
+# 
+# Python setup.py builds certain extensions (dl and imageop) only on 32
+# bits architecture. However, to test whether the architecture is 32
+# bits or not, it was looking at the sys.maxint value of the host Python
+# interpreter... which might run on a 64 bits architecture even though
+# the target is 32 bits, or which might run on a 32 bits architecture
+# even though the target is 64 bits.
+# 
+# Therefore, we introduce a is_arch_64_bits() function, which looks at
+# the pyconfig.h file generated by ./configure for the value of
+# SIZEOF_LONG to determine if the architecture is 32 or 64 bits.
+# 
+# Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
+# 
+# taken from:
+# http://git.buildroot.net/buildroot/plain/package/python/python-2.7-012-correct-32bit-64bit-check.patch?id=2985998f2810fb3b45af4e1ee46eaec993959edb
+
+def is_arch_64_bits():
+    data = open('pyconfig.h').read()
+    m = re.search(r"#s*define\s+SIZEOF_LONG\s+4\s*", data)
+    if m is None:
+        return True
+    else:
+        return False
+
 def add_dir_to_list(dirlist, dir):
     """Add the directory 'dir' to the list 'dirlist' (at the front) if
     1) 'dir' is not already in 'dirlist'
@@ -326,6 +352,8 @@
 
         # Don't try to load extensions for cross builds
         if cross_compiling:
+            self.announce('WARNING: skipping import check for cross compiled "%s"'
+                % ext.name)
             return
 
         try:
@@ -439,12 +467,13 @@
 
     def detect_modules(self):
         # Ensure that /usr/local is always used
-        if not cross_compiling:
-            add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
-            add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
-        if cross_compiling:
-            self.add_gcc_paths()
-        self.add_multiarch_paths()
+#        if not cross_compiling:
+#            add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
+#            add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
+#        if cross_compiling:
+#            self.add_gcc_paths()
+#        self.add_multiarch_paths()
+        add_dir_to_list(self.compiler.include_dirs, '.')
 
         # Add paths specified in the environment variables LDFLAGS and
         # CPPFLAGS for header and library files.
@@ -457,7 +486,7 @@
                 ('LDFLAGS', '-L', self.compiler.library_dirs),
                 ('CPPFLAGS', '-I', self.compiler.include_dirs)):
             env_val = sysconfig.get_config_var(env_var)
-            if env_val:
+            if env_val and (not cross_compiling):
                 # To prevent optparse from raising an exception about any
                 # options in env_val that it doesn't know about we strip out
                 # all double dashes and any dashes followed by a character
@@ -480,17 +509,6 @@
                     for directory in reversed(options.dirs):
                         add_dir_to_list(dir_list, directory)
 
-        if os.path.normpath(sys.prefix) != '/usr' \
-                and not sysconfig.get_config_var('PYTHONFRAMEWORK'):
-            # OSX note: Don't add LIBDIR and INCLUDEDIR to building a framework
-            # (PYTHONFRAMEWORK is set) to avoid # linking problems when
-            # building a framework with different architectures than
-            # the one that is currently installed (issue #7473)
-            add_dir_to_list(self.compiler.library_dirs,
-                            sysconfig.get_config_var("LIBDIR"))
-            add_dir_to_list(self.compiler.include_dirs,
-                            sysconfig.get_config_var("INCLUDEDIR"))
-
         try:
             have_unicode = unicode
         except NameError:
@@ -714,7 +732,7 @@
         exts.append( Extension('audioop', ['audioop.c']) )
 
         # Disabled on 64-bit platforms
-        if sys.maxsize != 9223372036854775807L:
+        if not is_arch_64_bits():
             # Operations on images
             exts.append( Extension('imageop', ['imageop.c']) )
         else:
@@ -1081,7 +1099,6 @@
             exts.append(Extension('_bsddb', ['_bsddb.c'],
                                   depends = ['bsddb.h'],
                                   library_dirs=dblib_dir,
-                                  runtime_library_dirs=dblib_dir,
                                   include_dirs=db_incs,
                                   libraries=dblibs))
         else:
@@ -1327,8 +1344,7 @@
                 missing.append('resource')
 
             # Sun yellow pages. Some systems have the functions in libc.
-            if (host_platform not in ['cygwin', 'atheos', 'qnx6'] and
-                find_file('rpcsvc/yp_prot.h', inc_dirs, []) is not None):
+            if (host_platform not in ['cygwin', 'atheos', 'qnx6']):
                 if (self.compiler.find_library_file(lib_dirs, 'nsl')):
                     libs = ['nsl']
                 else:
@@ -1527,10 +1543,10 @@
                 missing.append('_codecs_%s' % loc)
 
         # Dynamic loading module
-        if sys.maxint == 0x7fffffff:
+        if not is_arch_64_bits():
             # This requires sizeof(int) == sizeof(long) == sizeof(char*)
             dl_inc = find_file('dlfcn.h', [], inc_dirs)
-            if (dl_inc is not None) and (host_platform not in ['atheos']):
+            if (host_platform not in ['atheos']):
                 exts.append( Extension('dl', ['dlmodule.c']) )
             else:
                 missing.append('dl')
@@ -2021,10 +2037,7 @@
                                          ffi_configfile):
                 from distutils.dir_util import mkpath
                 mkpath(ffi_builddir)
-                config_args = [arg for arg in sysconfig.get_config_var("CONFIG_ARGS").split()
-                               if (('--host=' in arg) or ('--build=' in arg))]
-                if not self.verbose:
-                    config_args.append("-q")
+                config_args = [ '--host=%s' % os.environ["GNU_TARGET_NAME"] ]
 
                 # Pass empty CFLAGS because we'll just append the resulting
                 # CFLAGS to Python's; -g or -O2 is to be avoided.
