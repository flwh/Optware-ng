--- Bin/build-perl-modules.pl.orig	2007-05-25 04:02:45.000000000 +0300
+++ Bin/build-perl-modules.pl	2015-02-20 18:08:09.629564795 +0200
@@ -1,4 +1,4 @@
-#!/usr/bin/perl -w
+#
 
 # $Id$
 #
@@ -17,27 +17,26 @@
 use File::Copy;
 use File::Find;
 use File::Path;
-use File::Which;
 
 my $SOURCE = 'http://svn.slimdevices.com/vendor/src';
 my $dlext  = $Config{'dlext'};
 
 # The list of all the packages needed.
 my %packages = (
-	'Compress::Zlib'     => 'Compress-Zlib-1.41.tar.gz',
-	'DBI'                => 'DBI-1.50.tar.gz',
-	'DBD::mysql'         => 'DBD-mysql-3.0002.tar.gz',
-	'Digest::SHA1'       => 'Digest-SHA1-2.11.tar.gz',
-	'HTML::Parser'       => 'HTML-Parser-3.48.tar.gz',
-	'Template'           => 'Template-Toolkit-2.15.tar.gz',
-	'Time::HiRes'        => 'Time-HiRes-1.86.tar.gz',
-	'XML::Parser::Expat' => 'XML-Parser-2.34.tar.gz',
-	'YAML::Syck'         => 'YAML-Syck-0.64.tar.gz',
+	'Compress::Zlib'     => '@Compress-Zlib@.tar.gz',
+	'DBI'                => '@DBI@.tar.gz',
+	'DBD::mysql'         => '@DBD-mysql@.tar.gz',
+	'Digest::SHA1'       => '@Digest-SHA1@.tar.gz',
+	'HTML::Parser'       => '@HTML-Parser@.tar.gz',
+	'Template'           => '@Template-Toolkit@.tar.gz',
+	'Time::HiRes'        => '@Time-HiRes@.tar.gz',
+	'XML::Parser::Expat' => '@XML-Parser@.tar.gz',
+	'YAML::Syck'         => '@YAML-Syck@.tar.gz',
 );
 
 # Options for specific packages
 my %packageOptions = (
-	'Template-Toolkit-2.15' => {
+	'@Template-Toolkit@' => {
 
 		'Makefile.PL' => join(' ', qw(
 			TT_DOCS=n
@@ -53,19 +52,32 @@
 		)),
 	},
 
-	'DBD-mysql-3.0002' => {
+	'@XML-Parser@' => {
+		'Makefile.PL' => join(' ', qw(
+                        --cflags=
+                        --libs=
+                 )),
+        },
+
+	'@DBD-mysql@' => {
 
-		'env' => [qw(DBI-1.50/blib/lib: DBI-1.50/blib/arch)],
+		'env' => [qw(@DBI@/blib/lib: @DBI@/blib/arch)],
 	},
 );
 
 sub main {
 	my ($slimServerPath, $downloadPath, $perlBinary, @libList, $downloadUsing);
+	my $dbipackagedir;
+
+	my $archname = $ENV{GCC};
+	$archname =~ m/(^.+\/)(.+)(-gcc$)/;
+	$archname = $2;
 
-	my $archname = $Config{'archname'};
 	my $version  = $Config{'version'};
 
-	print "Welcome to the SlimServer perl module installer.\n\n";
+	$packageOptions{'@DBD-mysql@'}->{'Makefile.PL'} = " --mysql_config=$ENV{STAGINGDIR}%OPTWARE_TARGET_PREFIX%/bin/mysql_config ";
+
+	print "Welcome to the Slim Devices perl module installer.\n\n";
 	print "These packages are needed for SlimServer to function.\n";
 	print "You will need a C compiler (gcc), make, and perl installed.\n\n";
 	print "You will need development libraries for MySQL. eg: libmysqlclient\n\n";
@@ -135,7 +147,10 @@
 
 		for my $cmd (qw(curl wget)) {
 
-			if ($downloadUsing = which($cmd)) {
+			system("which $cmd >/dev/null 2>&1");
+
+			unless ($? >> 8) {
+				$downloadUsing = $cmd;
 				last;
 			}
 		}
@@ -153,21 +168,7 @@
 
 	# Only download the packages that were passsed.
 	my @packages = ();
-
-	if (scalar @ARGV) {
-
-		for my $package (@ARGV) {
-
-			if (grep { /$package/ } keys %packages) {
-
-				push @packages, $packages{$package};
-			}
-		}
-
-	} else {
-
-		@packages = sort values %packages;
-	}
+	@packages = sort values %packages;
 
 	# DBI needs to be first.
 	if ((grep { /DBI/ } @packages) && (grep { /DBD/ } @packages)) {
@@ -187,34 +188,12 @@
 
 	for my $package (@packages) {
 
+		my ($targetconfigureopts,$pasthruinc, $ldopts);
+		$targetconfigureopts = "AR=$ENV{AR} AS=$ENV{AS} LD=$ENV{LD} NM=$ENV{NM} CC=$ENV{CC} CPP=\"$ENV{CPP}\" GCC=$ENV{GCC} CXX=$ENV{CXX} RANLIB=$ENV{RANLIB} STRIP=$ENV{STRIP} CPPFLAGS=\"$ENV{CPPFLAGS}\" LDFLAGS=\"$ENV{LDFLAGS}\"";
 		chdir($pwd) or die "Couldn't change to $pwd : $!";
 
-		print "\nDownloading $package to: $pwd\n";
-
-		# Remove any previous version.
-		unlink $package;
-
-		if ($downloadUsing eq 'lwp') {
-
-			LWP::Simple::getstore("$SOURCE/$package?view=auto", $package);
-
-		} elsif ($downloadUsing =~ /curl$/) {
-
-			`$downloadUsing --silent -o $package $SOURCE/$package?view=auto`;
-
-		} else {
-
-			`$downloadUsing -q -O $package $SOURCE/$package?view=auto`;
-		}
-
-		unless (-r $package) {
-			print "Something looks wrong - I couldn't read $pwd/$package, which I just downloaded.\n";
-		}
-
-		print "Uncompressing..\n";
-		`gzip -d < $package | tar xvf -`;
-
-		unlink $package;
+		print "Uncompressing $package to: $pwd..\n";
+		`gzip -d < @DL_DIR@/$package | tar xvf -`;
 
 		# Just the directory name.
 		my ($packageDir) = ($package =~ /(\S+?)\.tar\.gz/);
@@ -230,15 +209,48 @@
 		}
 
 		print "Configuring..\n";
-		print "$env $perlBinary Makefile.PL $options\n";
-		`$env $perlBinary Makefile.PL $options`;
+		print "$env$targetconfigureopts $perlBinary Makefile.PL $options  PREFIX=%OPTWARE_TARGET_PREFIX%\n";
+
+		if ( $package eq  "@DBD-mysql@.tar.gz" ) { 
+		`cp ../../DBD-mysql-Makefile.PL Makefile.PL`;
+		}
+		if ( $package eq  "@Time-HiRes@.tar.gz" ) { 
+		`cp ../../Time-HiRes-Makefile.PL Makefile.PL`;
+		}
+
+		` $env $targetconfigureopts $perlBinary Makefile.PL $options  PREFIX=%OPTWARE_TARGET_PREFIX%`;
 
 		unless (-f 'Makefile') {
 			die "There was a problem creating Makefile - exiting!\n";
 		}
+		if ($package eq  "@DBD-mysql@.tar.gz") {
+# This code relies on DBI being processed before DBDSqlite.
+		`sed -e "s/~DRIVER~/mysql/g"  $dbipackagedir/Driver.xst > mysql.xsi`;
+		  $pasthruinc="\"$ENV{CPPFLAGS} -I$dbipackagedir -I$ENV{STAGINGDIR}%OPTWARE_TARGET_PREFIX%/include/mysql\"";
+
+		} else {
+		  $pasthruinc = "\"$ENV{CPPFLAGS}\"";
+		}
+
+		if ($package eq  "@DBI@.tar.gz") {
+		  $dbipackagedir  = "$downloadPath/$packageDir/blib/arch/auto/DBI" ;
+		}
+
+		$ldopts="PASTHRU_INC=$pasthruinc"; 
+		if ( $package eq  "@XML-Parser@.tar.gz" ) { 
+                      $ldopts = $ldopts . " LD=$ENV{GCC} LDDLFLAGS=\"-shared $ENV{LDFLAGS}\"";
+                 } ;
+
+		if ( $package eq  "@DBD-mysql@.tar.gz" ) { 
+		         $ldopts = $ldopts . " LD=$ENV{GCC} LDDLFLAGS=\"-shared $ENV{LDFLAGS}\"";
+		} ;
+		$ldopts = $ldopts . " LD_RUN_PATH=%OPTWARE_TARGET_PREFIX%/lib" ;
+		if ( defined($ENV{PERL_INC}) && $ENV{PERL_INC} ne "") { $ldopts = $ldopts . " PERL_INC=$ENV{PERL_INC}" ;  }; 
+
 
 		print "Building..\n";
-		`make`;	
+		print "\n\nmake $targetconfigureopts $ldopts\n\n";	
+		` make $targetconfigureopts $ldopts`;	
 
 		#print "Testing..\n";
 		#`make test`;
